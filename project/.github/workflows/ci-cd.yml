# CI/CD Pipeline for RAG Microservices
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          data-ingestion,
          vector-search, 
          query-api,
          rbac-service,
          llm-service,
          audit-service,
          suggestions-service,
          user-interface
        ]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service }}/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        npm ci
    
    - name: Run tests
      run: |
        cd ${{ matrix.service }}
        npm test
    
    - name: Run linting
      run: |
        cd ${{ matrix.service }}
        npm run lint

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push images
      run: |
        services=("data-ingestion" "vector-search" "query-api" "rbac-service" "llm-service" "audit-service" "suggestions-service" "user-interface")
        for service in "${services[@]}"; do
          docker build -t ragproject/$service:${{ github.sha }} ./$service
          docker push ragproject/$service:${{ github.sha }}
        done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Kubernetes
      run: |
        # Update image tags in deployment files
        sed -i 's/latest/${{ github.sha }}/g' deployments/kubernetes/*.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deployments/kubernetes/
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}